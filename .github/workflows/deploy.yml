name: Deploy

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      - run: npx changelogithub ${{ github.event_name == 'push' && github.ref_type == 'tag' && '--draft' || '--dry'}}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  deploy-win:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: windows-latest
    needs: 
      - generate-release-notes
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Rust toolchain
      uses: moonrepo/setup-rust@v1
      with:
        channel: stable
        cache: true
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Install NSIS
      shell: pwsh
      run: |
        Invoke-WebRequest -UserAgent "Wget" https://sourceforge.net/projects/nsis/files/NSIS%203/3.09/nsis-3.09-setup.exe/download -OutFile ${{ runner.temp }}\nsis-3.09-setup.exe
        & "${{ runner.temp }}\nsis-3.09-setup.exe" \S
        Add-Content -Path $env:GITHUB_PATH -Value "C:\Program Files (x86)\NSIS"
    - name: Install NSIS EnVar plugin
      shell: pwsh
      run: |
        Invoke-WebRequest https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip -OutFile ${{ runner.temp }}\EnVar_plugin.zip
        Expand-Archive "${{ runner.temp }}\EnVar_plugin.zip" -DestinationPath "C:\Program Files (x86)\NSIS" -Force
    - name: Build (Release)
      shell: pwsh
      run: cargo build --release --verbose
    - name: Package
      shell: pwsh
      run: | 
        cd win32_installer
        & "makensis" nsis.nsi
        $installer_name = "stm32tesseract-" + $env:GITHUB_REF.replace('refs/tags/', '') + "-installer.exe"
        Rename-Item -Path ./STM32TesseractInstaller.exe -NewName $installer_name
    - name: Release (GitHub)
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: true
        omitBody: true
        artifacts: "win32_installer/*.exe"

  deploy-linux:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: ubuntu-20.04
    needs: 
      - generate-release-notes
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Rust toolchain
      uses: moonrepo/setup-rust@v1
      with:
        channel: stable
        cache: true
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Install Packaging Tools
      run: cargo install cargo-deb
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libxkbcommon-x11-dev libudev-dev libinput-dev libfontconfig-dev
    - name: Build (Release)
      run: cargo build --release --verbose
    - name: Package (Debian)
      run: | 
        cargo deb -p stm32tesseract --no-build --verbose
        cargo deb -p stm32tesseract-gui --no-build --verbose
    - name: Release (GitHub)
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: true
        omitBody: true
        artifacts: "target/debian/*.deb"

  publish-release:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs:
    - deploy-win
    - deploy-linux
    steps:
      - name: Release (GitHub)
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          omitBody: true